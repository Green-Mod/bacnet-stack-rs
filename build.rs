extern crate bindgen;

use std::env;
use std::path::PathBuf;

fn main() {
    // This is the directory where the `c` library is located
    let libdir_path = PathBuf::from("bacnet-stack")
        // Canonicalize the path as `rustc-link-search` requires an absolute path
        .canonicalize()
        .expect("cannot canonicalize path");

    cc::Build::new()
        .cpp(false)
        .flag("-Wno-sign-compare")
        .flag("-Wno-unused-parameter")
        .flag("-Wno-unused-but-set-variable")
        .flag("-Wno-self-assign")
        .file(libdir_path.join("ports/bsd/bip-init.c"))
        .file(libdir_path.join("ports/bsd/bip6.c"))
        .file(libdir_path.join("ports/bsd/datetime-init.c"))
        .file(libdir_path.join("ports/bsd/mstimer-init.c"))
        .file(libdir_path.join("bacnet/abort.c"))
        .file(libdir_path.join("bacnet/access_rule.c"))
        .file(libdir_path.join("bacnet/alarm_ack.c"))
        .file(libdir_path.join("bacnet/arf.c"))
        .file(libdir_path.join("bacnet/assigned_access_rights.c"))
        .file(libdir_path.join("bacnet/authentication_factor.c"))
        .file(libdir_path.join("bacnet/authentication_factor_format.c"))
        .file(libdir_path.join("bacnet/awf.c"))
        .file(libdir_path.join("bacnet/bacaddr.c"))
        .file(libdir_path.join("bacnet/bacapp.c"))
        .file(libdir_path.join("bacnet/bacdcode.c"))
        // .file(libdir_path.join("bacnet/bacdef.c"))
        .file(libdir_path.join("bacnet/bacdest.c"))
        .file(libdir_path.join("bacnet/bacdevobjpropref.c"))
        // .file(libdir_path.join("bacnet/bacenum.c"))
        .file(libdir_path.join("bacnet/bacerror.c"))
        .file(libdir_path.join("bacnet/bacint.c"))
        // .file(libdir_path.join("bacnet/bacnet_stack_exports.c"))
        .file(libdir_path.join("bacnet/bacprop.c"))
        .file(libdir_path.join("bacnet/bacpropstates.c"))
        .file(libdir_path.join("bacnet/bacreal.c"))
        .file(libdir_path.join("bacnet/bacstr.c"))
        .file(libdir_path.join("bacnet/bactext.c"))
        .file(libdir_path.join("bacnet/bactimevalue.c"))
        // .file(libdir_path.join("bacnet/bits.c"))
        // .file(libdir_path.join("bacnet/bytes.c"))
        // .file(libdir_path.join("bacnet/config.c"))
        .file(libdir_path.join("bacnet/cov.c"))
        .file(libdir_path.join("bacnet/credential_authentication_factor.c"))
        .file(libdir_path.join("bacnet/dailyschedule.c"))
        .file(libdir_path.join("bacnet/datetime.c"))
        .file(libdir_path.join("bacnet/dcc.c"))
        .file(libdir_path.join("bacnet/event.c"))
        .file(libdir_path.join("bacnet/get_alarm_sum.c"))
        .file(libdir_path.join("bacnet/getevent.c"))
        .file(libdir_path.join("bacnet/hostnport.c"))
        .file(libdir_path.join("bacnet/iam.c"))
        .file(libdir_path.join("bacnet/ihave.c"))
        .file(libdir_path.join("bacnet/indtext.c"))
        .file(libdir_path.join("bacnet/lighting.c"))
        .file(libdir_path.join("bacnet/list_element.c"))
        .file(libdir_path.join("bacnet/lso.c"))
        .file(libdir_path.join("bacnet/memcopy.c"))
        .file(libdir_path.join("bacnet/npdu.c"))
        .file(libdir_path.join("bacnet/property.c"))
        .file(libdir_path.join("bacnet/proplist.c"))
        .file(libdir_path.join("bacnet/ptransfer.c"))
        .file(libdir_path.join("bacnet/rd.c"))
        .file(libdir_path.join("bacnet/readrange.c"))
        .file(libdir_path.join("bacnet/reject.c"))
        .file(libdir_path.join("bacnet/rp.c"))
        .file(libdir_path.join("bacnet/rpm.c"))
        .file(libdir_path.join("bacnet/timestamp.c"))
        .file(libdir_path.join("bacnet/timesync.c"))
        // .file(libdir_path.join("bacnet/version.c"))
        .file(libdir_path.join("bacnet/weeklyschedule.c"))
        .file(libdir_path.join("bacnet/whohas.c"))
        .file(libdir_path.join("bacnet/whois.c"))
        .file(libdir_path.join("bacnet/wp.c"))
        .file(libdir_path.join("bacnet/wpm.c"))
        .file(libdir_path.join("bacnet/datalink/bacsec.c"))
        .file(libdir_path.join("bacnet/datalink/bvlc.c"))
        .file(libdir_path.join("bacnet/datalink/bvlc6.c"))
        .file(libdir_path.join("bacnet/datalink/cobs.c"))
        .file(libdir_path.join("bacnet/datalink/crc.c"))
        .file(libdir_path.join("bacnet/datalink/datalink.c"))
        .file(libdir_path.join("bacnet/datalink/dlenv.c"))
        .file(libdir_path.join("bacnet/datalink/mstp.c"))
        // .file(libdir_path.join("bacnet/datalink/mstpdef.c"))
        .file(libdir_path.join("bacnet/datalink/mstptext.c"))
        // .file(libdir_path.join("bacnet/basic/services.c"))
        .file(libdir_path.join("bacnet/basic/bbmd/h_bbmd.c"))
        .file(libdir_path.join("bacnet/basic/bbmd6/h_bbmd6.c"))
        .file(libdir_path.join("bacnet/basic/bbmd6/vmac.c"))
        .file(libdir_path.join("bacnet/basic/binding/address.c"))
        .file(libdir_path.join("bacnet/basic/client/bac-data.c"))
        .file(libdir_path.join("bacnet/basic/client/bac-rw.c"))
        .file(libdir_path.join("bacnet/basic/client/bac-task.c"))
        .file(libdir_path.join("bacnet/basic/npdu/h_npdu.c"))
        .file(libdir_path.join("bacnet/basic/npdu/h_routed_npdu.c"))
        .file(libdir_path.join("bacnet/basic/npdu/s_router.c"))
        .file(libdir_path.join("bacnet/basic/sys/bigend.c"))
        .file(libdir_path.join("bacnet/basic/sys/color_rgb.c"))
        .file(libdir_path.join("bacnet/basic/sys/days.c"))
        .file(libdir_path.join("bacnet/basic/sys/debug.c"))
        .file(libdir_path.join("bacnet/basic/sys/fifo.c"))
        .file(libdir_path.join("bacnet/basic/sys/filename.c"))
        // .file(libdir_path.join("bacnet/basic/sys/key.c"))
        .file(libdir_path.join("bacnet/basic/sys/keylist.c"))
        .file(libdir_path.join("bacnet/basic/sys/mstimer.c"))
        // .file(libdir_path.join("bacnet/basic/sys/platform.c"))
        .file(libdir_path.join("bacnet/basic/sys/ringbuf.c"))
        .file(libdir_path.join("bacnet/basic/sys/sbuf.c"))
        .file(libdir_path.join("bacnet/basic/object/acc.c"))
        .file(libdir_path.join("bacnet/basic/object/access_credential.c"))
        .file(libdir_path.join("bacnet/basic/object/access_door.c"))
        .file(libdir_path.join("bacnet/basic/object/access_point.c"))
        .file(libdir_path.join("bacnet/basic/object/access_rights.c"))
        .file(libdir_path.join("bacnet/basic/object/access_user.c"))
        .file(libdir_path.join("bacnet/basic/object/access_zone.c"))
        .file(libdir_path.join("bacnet/basic/object/ai.c"))
        .file(libdir_path.join("bacnet/basic/object/ao.c"))
        .file(libdir_path.join("bacnet/basic/object/av.c"))
        .file(libdir_path.join("bacnet/basic/object/bacfile.c"))
        .file(libdir_path.join("bacnet/basic/object/bi.c"))
        .file(libdir_path.join("bacnet/basic/object/bo.c"))
        .file(libdir_path.join("bacnet/basic/object/bv.c"))
        .file(libdir_path.join("bacnet/basic/object/channel.c"))
        .file(libdir_path.join("bacnet/basic/object/color_object.c"))
        .file(libdir_path.join("bacnet/basic/object/color_temperature.c"))
        .file(libdir_path.join("bacnet/basic/object/command.c"))
        .file(libdir_path.join("bacnet/basic/object/credential_data_input.c"))
        .file(libdir_path.join("bacnet/basic/object/csv.c"))
        .file(libdir_path.join("bacnet/basic/object/device.c"))
        .file(libdir_path.join("bacnet/basic/object/iv.c"))
        .file(libdir_path.join("bacnet/basic/object/lc.c"))
        .file(libdir_path.join("bacnet/basic/object/lo.c"))
        .file(libdir_path.join("bacnet/basic/object/lsp.c"))
        .file(libdir_path.join("bacnet/basic/object/ms-input.c"))
        .file(libdir_path.join("bacnet/basic/object/mso.c"))
        .file(libdir_path.join("bacnet/basic/object/msv.c"))
        .file(libdir_path.join("bacnet/basic/object/nc.c"))
        .file(libdir_path.join("bacnet/basic/object/netport.c"))
        .file(libdir_path.join("bacnet/basic/object/objects.c"))
        .file(libdir_path.join("bacnet/basic/object/osv.c"))
        .file(libdir_path.join("bacnet/basic/object/piv.c"))
        .file(libdir_path.join("bacnet/basic/object/schedule.c"))
        .file(libdir_path.join("bacnet/basic/object/trendlog.c"))
        .file(libdir_path.join("bacnet/basic/service/h_alarm_ack.c"))
        .file(libdir_path.join("bacnet/basic/service/h_apdu.c"))
        .file(libdir_path.join("bacnet/basic/service/h_arf.c"))
        .file(libdir_path.join("bacnet/basic/service/h_arf_a.c"))
        .file(libdir_path.join("bacnet/basic/service/h_awf.c"))
        .file(libdir_path.join("bacnet/basic/service/h_ccov.c"))
        .file(libdir_path.join("bacnet/basic/service/h_cov.c"))
        .file(libdir_path.join("bacnet/basic/service/h_dcc.c"))
        .file(libdir_path.join("bacnet/basic/service/h_gas_a.c"))
        .file(libdir_path.join("bacnet/basic/service/h_get_alarm_sum.c"))
        .file(libdir_path.join("bacnet/basic/service/h_getevent.c"))
        .file(libdir_path.join("bacnet/basic/service/h_getevent_a.c"))
        .file(libdir_path.join("bacnet/basic/service/h_iam.c"))
        .file(libdir_path.join("bacnet/basic/service/h_ihave.c"))
        .file(libdir_path.join("bacnet/basic/service/h_list_element.c"))
        .file(libdir_path.join("bacnet/basic/service/h_lso.c"))
        .file(libdir_path.join("bacnet/basic/service/h_noserv.c"))
        .file(libdir_path.join("bacnet/basic/service/h_rd.c"))
        .file(libdir_path.join("bacnet/basic/service/h_rp.c"))
        .file(libdir_path.join("bacnet/basic/service/h_rp_a.c"))
        .file(libdir_path.join("bacnet/basic/service/h_rpm.c"))
        .file(libdir_path.join("bacnet/basic/service/h_rpm_a.c"))
        .file(libdir_path.join("bacnet/basic/service/h_rr.c"))
        .file(libdir_path.join("bacnet/basic/service/h_rr_a.c"))
        .file(libdir_path.join("bacnet/basic/service/h_ts.c"))
        .file(libdir_path.join("bacnet/basic/service/h_ucov.c"))
        .file(libdir_path.join("bacnet/basic/service/h_upt.c"))
        .file(libdir_path.join("bacnet/basic/service/h_whohas.c"))
        .file(libdir_path.join("bacnet/basic/service/h_whois.c"))
        .file(libdir_path.join("bacnet/basic/service/h_wp.c"))
        .file(libdir_path.join("bacnet/basic/service/h_wpm.c"))
        .file(libdir_path.join("bacnet/basic/service/s_abort.c"))
        .file(libdir_path.join("bacnet/basic/service/s_ack_alarm.c"))
        .file(libdir_path.join("bacnet/basic/service/s_arfs.c"))
        .file(libdir_path.join("bacnet/basic/service/s_awfs.c"))
        .file(libdir_path.join("bacnet/basic/service/s_cevent.c"))
        .file(libdir_path.join("bacnet/basic/service/s_cov.c"))
        .file(libdir_path.join("bacnet/basic/service/s_dcc.c"))
        .file(libdir_path.join("bacnet/basic/service/s_error.c"))
        .file(libdir_path.join("bacnet/basic/service/s_get_alarm_sum.c"))
        .file(libdir_path.join("bacnet/basic/service/s_get_event.c"))
        .file(libdir_path.join("bacnet/basic/service/s_getevent.c"))
        .file(libdir_path.join("bacnet/basic/service/s_iam.c"))
        .file(libdir_path.join("bacnet/basic/service/s_ihave.c"))
        .file(libdir_path.join("bacnet/basic/service/s_list_element.c"))
        .file(libdir_path.join("bacnet/basic/service/s_lso.c"))
        .file(libdir_path.join("bacnet/basic/service/s_rd.c"))
        .file(libdir_path.join("bacnet/basic/service/s_readrange.c"))
        .file(libdir_path.join("bacnet/basic/service/s_rp.c"))
        .file(libdir_path.join("bacnet/basic/service/s_rpm.c"))
        .file(libdir_path.join("bacnet/basic/service/s_ts.c"))
        .file(libdir_path.join("bacnet/basic/service/s_uevent.c"))
        .file(libdir_path.join("bacnet/basic/service/s_upt.c"))
        .file(libdir_path.join("bacnet/basic/service/s_whohas.c"))
        .file(libdir_path.join("bacnet/basic/service/s_whois.c"))
        .file(libdir_path.join("bacnet/basic/service/s_wp.c"))
        .file(libdir_path.join("bacnet/basic/service/s_wpm.c"))
        .file(libdir_path.join("bacnet/basic/tsm/tsm.c"))
        // .file(libdir_path.join("bacnet/basic/ucix/ucix.c"))
        .compile("bacnetstack");

    // This is the path to the `c` headers file.
    let headers_path = libdir_path.join("wrapper.h");
    let headers_path_str = headers_path.to_str().expect("Path is not a valid string");

    let bindings = bindgen::Builder::default()
        .header(headers_path_str)
        .generate()
        .expect("Unable to generate bindings");

    // Write the bindings to the $OUT_DIR/bindings.rs file.
    let out_path = PathBuf::from(env::var("OUT_DIR").unwrap()).join("bindings.rs");
    bindings
        .write_to_file(out_path)
        .expect("Couldn't write bindings!");
}
